include(CMakeParseArguments)

# Function to wrap a given string into multiple lines at the given column position.
# Parameters:
#   VARIABLE    - The name of the CMake variable holding the string.
#   AT_COLUMN   - The column position at which string will be wrapped.
function(WRAP_STRING)
    set(oneValueArgs VARIABLE AT_COLUMN)
    cmake_parse_arguments(WRAP_STRING "${options}" "${oneValueArgs}" "" ${ARGN})

    string(LENGTH ${${WRAP_STRING_VARIABLE}} stringLength)
    math(EXPR offset "0")

    while(stringLength GREATER 0)

        if(stringLength GREATER ${WRAP_STRING_AT_COLUMN})
            math(EXPR length "${WRAP_STRING_AT_COLUMN}")
        else()
            math(EXPR length "${stringLength}")
        endif()

        string(SUBSTRING ${${WRAP_STRING_VARIABLE}} ${offset} ${length} line)
        set(lines "${lines}\n${line}")

        math(EXPR stringLength "${stringLength} - ${length}")
        math(EXPR offset "${offset} + ${length}")
    endwhile()

    set(${WRAP_STRING_VARIABLE} "${lines}" PARENT_SCOPE)
endfunction()

# Function to embed contents of a file as byte array in C/C++ header file(.h). The header file
# will contain a byte array and integer variable holding the size of the array.
# Parameters
#   SOURCE_FILE     - The path of source file whose contents will be embedded in the header file.
#   VARIABLE_NAME   - The name of the variable for the byte array. The string "_SIZE" will be append
#                     to this name and will be used a variable name for size variable.
#   TEXT_FILE       - If specified a null byte(zero) will be append to the byte array.
#   SPRITE_FILE     - If specified, 0x77fb4100 will be prepended to the byte array.
# Usage:
#   wrap_file(SOURCE_FILE "Logo.png" VARIABLE_NAME "LOGO_PNG")
function(WRAP_FILE)
    set(options APPEND TEXT_FILE SPRITE_FILE)
    set(oneValueArgs SOURCE_FILE VARIABLE_NAME)
    cmake_parse_arguments(WRAP_FILE "${options}" "${oneValueArgs}" "" ${ARGN})

    if("${WRAP_FILE_SOURCE_FILE}" IS_NEWER_THAN "${WRAP_FILE_SOURCE_FILE}.hxx")
        message(STATUS "Rebuilding ${WRAP_FILE_SOURCE_FILE}.hxx")
        # reads source file contents as hex string
        file(READ ${WRAP_FILE_SOURCE_FILE} hexString HEX)
        string(LENGTH ${hexString} hexStringLength)

        if(WRAP_FILE_TEXT_FILE)
            set(hexString "${hexString}00")
        endif()

        if(WRAP_FILE_SPRITE_FILE)
            set(hexString "77fb4100${hexString}")
            math(EXPR hexStringLength "${hexStringLength} + 8")
        endif()

        # wraps the hex string into multiple lines at column 32(i.e. 16 bytes per line)
        wrap_string(VARIABLE hexString AT_COLUMN 32)
        math(EXPR arraySize "${hexStringLength} / 2")

        # adds '0x' prefix and comma suffix before and after every byte respectively
        string(REGEX REPLACE "([0-9a-f][0-9a-f])" "0x\\1, " arrayValues ${hexString})
        # removes trailing comma
        string(REGEX REPLACE ", $" "" arrayValues ${arrayValues})

        # declares byte array and the length variables
        set(arrayDefinition "const unsigned char ${WRAP_FILE_VARIABLE_NAME}[] = { ${arrayValues} };")
        set(arraySizeDefinition "const size_t ${WRAP_FILE_VARIABLE_NAME}_SIZE = ${arraySize};")

        set(declarations "${arrayDefinition}\n\n${arraySizeDefinition}\n\n")
        file(WRITE "${WRAP_FILE_SOURCE_FILE}.hxx" "${declarations}")
    endif()
endfunction()
